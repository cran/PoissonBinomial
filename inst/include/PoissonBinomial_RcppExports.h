// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_PoissonBinomial_RCPPEXPORTS_H_GEN_
#define RCPP_PoissonBinomial_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace PoissonBinomial {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("PoissonBinomial", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("PoissonBinomial", "_PoissonBinomial_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in PoissonBinomial");
            }
        }
    }

    inline NumericVector dpb_conv(IntegerVector obs, NumericVector probs) {
        typedef SEXP(*Ptr_dpb_conv)(SEXP,SEXP);
        static Ptr_dpb_conv p_dpb_conv = NULL;
        if (p_dpb_conv == NULL) {
            validateSignature("NumericVector(*dpb_conv)(IntegerVector,NumericVector)");
            p_dpb_conv = (Ptr_dpb_conv)R_GetCCallable("PoissonBinomial", "_PoissonBinomial_dpb_conv");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dpb_conv(Shield<SEXP>(Rcpp::wrap(obs)), Shield<SEXP>(Rcpp::wrap(probs)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector ppb_conv(IntegerVector obs, NumericVector probs) {
        typedef SEXP(*Ptr_ppb_conv)(SEXP,SEXP);
        static Ptr_ppb_conv p_ppb_conv = NULL;
        if (p_ppb_conv == NULL) {
            validateSignature("NumericVector(*ppb_conv)(IntegerVector,NumericVector)");
            p_ppb_conv = (Ptr_ppb_conv)R_GetCCallable("PoissonBinomial", "_PoissonBinomial_ppb_conv");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ppb_conv(Shield<SEXP>(Rcpp::wrap(obs)), Shield<SEXP>(Rcpp::wrap(probs)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector dpb_dc(IntegerVector obs, NumericVector probs) {
        typedef SEXP(*Ptr_dpb_dc)(SEXP,SEXP);
        static Ptr_dpb_dc p_dpb_dc = NULL;
        if (p_dpb_dc == NULL) {
            validateSignature("NumericVector(*dpb_dc)(IntegerVector,NumericVector)");
            p_dpb_dc = (Ptr_dpb_dc)R_GetCCallable("PoissonBinomial", "_PoissonBinomial_dpb_dc");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dpb_dc(Shield<SEXP>(Rcpp::wrap(obs)), Shield<SEXP>(Rcpp::wrap(probs)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector ppb_dc(IntegerVector obs, NumericVector probs) {
        typedef SEXP(*Ptr_ppb_dc)(SEXP,SEXP);
        static Ptr_ppb_dc p_ppb_dc = NULL;
        if (p_ppb_dc == NULL) {
            validateSignature("NumericVector(*ppb_dc)(IntegerVector,NumericVector)");
            p_ppb_dc = (Ptr_ppb_dc)R_GetCCallable("PoissonBinomial", "_PoissonBinomial_ppb_dc");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ppb_dc(Shield<SEXP>(Rcpp::wrap(obs)), Shield<SEXP>(Rcpp::wrap(probs)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector dpb_dftcf(IntegerVector obs, NumericVector probs) {
        typedef SEXP(*Ptr_dpb_dftcf)(SEXP,SEXP);
        static Ptr_dpb_dftcf p_dpb_dftcf = NULL;
        if (p_dpb_dftcf == NULL) {
            validateSignature("NumericVector(*dpb_dftcf)(IntegerVector,NumericVector)");
            p_dpb_dftcf = (Ptr_dpb_dftcf)R_GetCCallable("PoissonBinomial", "_PoissonBinomial_dpb_dftcf");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dpb_dftcf(Shield<SEXP>(Rcpp::wrap(obs)), Shield<SEXP>(Rcpp::wrap(probs)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector ppb_dftcf(IntegerVector obs, NumericVector probs) {
        typedef SEXP(*Ptr_ppb_dftcf)(SEXP,SEXP);
        static Ptr_ppb_dftcf p_ppb_dftcf = NULL;
        if (p_ppb_dftcf == NULL) {
            validateSignature("NumericVector(*ppb_dftcf)(IntegerVector,NumericVector)");
            p_ppb_dftcf = (Ptr_ppb_dftcf)R_GetCCallable("PoissonBinomial", "_PoissonBinomial_ppb_dftcf");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ppb_dftcf(Shield<SEXP>(Rcpp::wrap(obs)), Shield<SEXP>(Rcpp::wrap(probs)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector dpb_rf(IntegerVector obs, NumericVector probs) {
        typedef SEXP(*Ptr_dpb_rf)(SEXP,SEXP);
        static Ptr_dpb_rf p_dpb_rf = NULL;
        if (p_dpb_rf == NULL) {
            validateSignature("NumericVector(*dpb_rf)(IntegerVector,NumericVector)");
            p_dpb_rf = (Ptr_dpb_rf)R_GetCCallable("PoissonBinomial", "_PoissonBinomial_dpb_rf");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dpb_rf(Shield<SEXP>(Rcpp::wrap(obs)), Shield<SEXP>(Rcpp::wrap(probs)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector ppb_rf(IntegerVector obs, NumericVector probs) {
        typedef SEXP(*Ptr_ppb_rf)(SEXP,SEXP);
        static Ptr_ppb_rf p_ppb_rf = NULL;
        if (p_ppb_rf == NULL) {
            validateSignature("NumericVector(*ppb_rf)(IntegerVector,NumericVector)");
            p_ppb_rf = (Ptr_ppb_rf)R_GetCCallable("PoissonBinomial", "_PoissonBinomial_ppb_rf");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ppb_rf(Shield<SEXP>(Rcpp::wrap(obs)), Shield<SEXP>(Rcpp::wrap(probs)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector dpb_mean(IntegerVector obs, NumericVector probs) {
        typedef SEXP(*Ptr_dpb_mean)(SEXP,SEXP);
        static Ptr_dpb_mean p_dpb_mean = NULL;
        if (p_dpb_mean == NULL) {
            validateSignature("NumericVector(*dpb_mean)(IntegerVector,NumericVector)");
            p_dpb_mean = (Ptr_dpb_mean)R_GetCCallable("PoissonBinomial", "_PoissonBinomial_dpb_mean");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dpb_mean(Shield<SEXP>(Rcpp::wrap(obs)), Shield<SEXP>(Rcpp::wrap(probs)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector ppb_mean(IntegerVector obs, NumericVector probs) {
        typedef SEXP(*Ptr_ppb_mean)(SEXP,SEXP);
        static Ptr_ppb_mean p_ppb_mean = NULL;
        if (p_ppb_mean == NULL) {
            validateSignature("NumericVector(*ppb_mean)(IntegerVector,NumericVector)");
            p_ppb_mean = (Ptr_ppb_mean)R_GetCCallable("PoissonBinomial", "_PoissonBinomial_ppb_mean");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ppb_mean(Shield<SEXP>(Rcpp::wrap(obs)), Shield<SEXP>(Rcpp::wrap(probs)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector dpb_gmba(IntegerVector obs, NumericVector probs, bool anti) {
        typedef SEXP(*Ptr_dpb_gmba)(SEXP,SEXP,SEXP);
        static Ptr_dpb_gmba p_dpb_gmba = NULL;
        if (p_dpb_gmba == NULL) {
            validateSignature("NumericVector(*dpb_gmba)(IntegerVector,NumericVector,bool)");
            p_dpb_gmba = (Ptr_dpb_gmba)R_GetCCallable("PoissonBinomial", "_PoissonBinomial_dpb_gmba");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dpb_gmba(Shield<SEXP>(Rcpp::wrap(obs)), Shield<SEXP>(Rcpp::wrap(probs)), Shield<SEXP>(Rcpp::wrap(anti)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector ppb_gmba(IntegerVector obs, NumericVector probs, bool anti) {
        typedef SEXP(*Ptr_ppb_gmba)(SEXP,SEXP,SEXP);
        static Ptr_ppb_gmba p_ppb_gmba = NULL;
        if (p_ppb_gmba == NULL) {
            validateSignature("NumericVector(*ppb_gmba)(IntegerVector,NumericVector,bool)");
            p_ppb_gmba = (Ptr_ppb_gmba)R_GetCCallable("PoissonBinomial", "_PoissonBinomial_ppb_gmba");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ppb_gmba(Shield<SEXP>(Rcpp::wrap(obs)), Shield<SEXP>(Rcpp::wrap(probs)), Shield<SEXP>(Rcpp::wrap(anti)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector dpb_pa(IntegerVector obs, NumericVector probs) {
        typedef SEXP(*Ptr_dpb_pa)(SEXP,SEXP);
        static Ptr_dpb_pa p_dpb_pa = NULL;
        if (p_dpb_pa == NULL) {
            validateSignature("NumericVector(*dpb_pa)(IntegerVector,NumericVector)");
            p_dpb_pa = (Ptr_dpb_pa)R_GetCCallable("PoissonBinomial", "_PoissonBinomial_dpb_pa");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dpb_pa(Shield<SEXP>(Rcpp::wrap(obs)), Shield<SEXP>(Rcpp::wrap(probs)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector ppb_pa(IntegerVector obs, NumericVector probs) {
        typedef SEXP(*Ptr_ppb_pa)(SEXP,SEXP);
        static Ptr_ppb_pa p_ppb_pa = NULL;
        if (p_ppb_pa == NULL) {
            validateSignature("NumericVector(*ppb_pa)(IntegerVector,NumericVector)");
            p_ppb_pa = (Ptr_ppb_pa)R_GetCCallable("PoissonBinomial", "_PoissonBinomial_ppb_pa");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ppb_pa(Shield<SEXP>(Rcpp::wrap(obs)), Shield<SEXP>(Rcpp::wrap(probs)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector dpb_na(IntegerVector obs, NumericVector probs, bool refined) {
        typedef SEXP(*Ptr_dpb_na)(SEXP,SEXP,SEXP);
        static Ptr_dpb_na p_dpb_na = NULL;
        if (p_dpb_na == NULL) {
            validateSignature("NumericVector(*dpb_na)(IntegerVector,NumericVector,bool)");
            p_dpb_na = (Ptr_dpb_na)R_GetCCallable("PoissonBinomial", "_PoissonBinomial_dpb_na");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dpb_na(Shield<SEXP>(Rcpp::wrap(obs)), Shield<SEXP>(Rcpp::wrap(probs)), Shield<SEXP>(Rcpp::wrap(refined)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector ppb_na(IntegerVector obs, NumericVector probs, bool refined) {
        typedef SEXP(*Ptr_ppb_na)(SEXP,SEXP,SEXP);
        static Ptr_ppb_na p_ppb_na = NULL;
        if (p_ppb_na == NULL) {
            validateSignature("NumericVector(*ppb_na)(IntegerVector,NumericVector,bool)");
            p_ppb_na = (Ptr_ppb_na)R_GetCCallable("PoissonBinomial", "_PoissonBinomial_ppb_na");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ppb_na(Shield<SEXP>(Rcpp::wrap(obs)), Shield<SEXP>(Rcpp::wrap(probs)), Shield<SEXP>(Rcpp::wrap(refined)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

}

#endif // RCPP_PoissonBinomial_RCPPEXPORTS_H_GEN_
